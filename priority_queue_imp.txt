#include <bits/stdc++.h>

Suppose, we want to sort people in descending order according to their salary and
 if tie then according to their age.

struct people
{
    int age,salary;

};
struct compare
{
    bool operator()(const people & a, const people & b)
    {
        if(a.salary==b.salary)
        {
            return a.age>b.age;
        }
        else
        {
            return a.salary>b.salary;
        }

    }
};

Same result can be obtained by operator overloading :
struct people
{
    int age,salary;

    bool operator< (const people & p)const
    {
        if(salary==p.salary)
        {
            return age>p.age;
        }
        else
        {
            return salary>p.salary;
        }
    }
};
int main()
{
    priority_queue<people> pq;
    people person1,person2,person3;
    person1.salary=100;
    person1.age = 50;
    person2.salary=80;
    person2.age = 40;
    person3.salary = 100;
    person3.age=40;


    pq.push(person1);
    pq.push(person2);
    pq.push(person3);

    while(!pq.empty())
    {
        people p = pq.top();
        pq.pop();
        cout<<p.salary<<" "<<p.age<<endl;
    }
    return 0;
}










int main()
{

    priority_queue<people,vector<people>,compare> pq;
    people person1,person2,person3;
    person1.salary=100;
    person1.age = 50;
    person2.salary=80;
    person2.age = 40;
    person3.salary = 100;
    person3.age=40;


    pq.push(person1);
    pq.push(person2);
    pq.push(person3);

    while(!pq.empty())
    {
        people p = pq.top();
        pq.pop();
        cout<<p.salary<<" "<<p.age<<endl;
    }
    return 0;
}









3. Using custom structure or class :

struct compare
{
    bool operator()(const int & a, const int & b)
    {
        return a>b;
    }
};

int main()
{

    priority_queue<int,vector<int>,compare> pq;
    pq.push(1);
    pq.push(2);
    pq.push(3);

    while(!pq.empty())
    {
        int value = pq.top();
        pq.pop();
        cout<<value<<" ";
    }

    return 0;
}

using namespace std;

int main()
{
    int value;
    priority_queue<int>pq;
    pq.push(1);
    pq.push(2);
    pq.push(3);

    while(!pq.empty())
    {
        value = pq.top();
        pq.pop();
        cout<<value<< " ";
    }
    return 0;
}

Using greater as comparison function :
#include <bits/stdc++.h>

using namespace std;

int main()
{
    int value;
    priority_queue<int,vector<int>,greater<int> >pq;
    pq.push(1);
    pq.push(2);
    pq.push(3);

    while(!pq.empty())
    {
        value = pq.top();
        pq.pop();
        cout<<value<< " ";
    }
    return 0;
}

negative

int main()
{
    priority_queue<int>pq2;
    pq2.push(-1); //for +1
    pq2.push(-2); //for +2
    pq2.push(-3); //for +3
    pq2.push(4);  //for -4

    while(!pq2.empty())
    {
        int value = pq2.top();
        pq2.pop();
        cout<<-value<<" "; 
    }

    return 0;
}

