Sequence containers are used for data structures that store objects of the same type in a linear manner.

The STL SequenceContainer types are:

array represents a static contiguous array
vector represents a dynamic contiguous array
forward_list represents a singly-linked list
list represents a doubly-linked list
deque represents a double-ended queue, where elements can be added to the front or back of the queue

The standard container adapters are:

stack provides an LIFO data structure
queue provides a FIFO data structure
priority_queue provides a priority queue, which allows for constant-time lookup of the largest element (by default)

Associative containers provide sorted data structures that provide a fast lookup (O(log n) time) using keys.

The STL AssociativeContainer types are can be divided in two ways: containers which require unique keys, and those which allow multiple entries using the same key.


Keys are unique
set is a collection of unique keys, sorted by keys
map is a collection of key-value pairs, sorted by keys
set and map are typically implemented using red-black trees
Multiple entries for the same key are permitted
multiset is a collection of keys, sorted by keys
multimap is a collection of key-value pairs, sorted by keys


Unordered Associative Containers
Unordered associative containers provide unsorted data structures that can be accessed using a hash. Access times are O(n) in the worst-case, but much faster than linear time for most operations.

For all STL UnorderedAssociativeContainer types, a hashed key is used to access the data. Similar to the AssociativeContainer, the standard types are split between those that require unique keys, and those that do not:

Keys are unique
unordered set is a collection of keys, hashed by keys
unordered_map is a collection of key-value pairs, hashed by keys
Multiple entires for the same key are permitted
unordered_multiset is a collection of keys, hashed by keys
unordered_multimap is a collection of key-value pairs, hashed by keys
